//// ------------------------------------------------------
//// Snippets from chapter 16: 
////      The Collectionsnewline API
//// Section: 18. Sequences
//// ------------------------------------------------------


//----#### SNIPPET #### - 1
    sequenceOf(1, 2, 7, 5) 

//----#### SNIPPET #### - 2
    iter.asSequence() 

//----#### SNIPPET #### - 3
    // Signature:
    // fun <T : Any> generateSequence(
    //     nextFunction: () -> T?
    // ): Sequence<T>

    var iterVar = 0
    val seq = generateSequence {
        iterVar++
    }

//----#### SNIPPET #### - 4
    fun <T : Any> generateSequence(
      seed: T?,
      nextFunction: (T) -> T?
    ): Sequence<T>
    // or
    fun <T : Any> generateSequence(
      seedFunction: () -> T?,
      nextFunction: (T) -> T?
    ): Sequence<T>

//----#### SNIPPET #### - 5
    val seq = generateSequence(
      seed = 0,
      nextFunction = { curr -> curr + 1 }
    )

    // example usage:
    seq.take(10).forEach { i ->
      // i will have values 0, 1, 2, ..., 9
      ...
    }

//----#### SNIPPET #### - 6
    val seqFib = generateSequence(
        seed = Pair(1,1),
        nextFunction = { curr ->
            Pair(curr.second, curr.first + curr.second)
        }
    )

    // example usage
    seqFib.take(10).map { it.second }.forEach {
        Log.e("LOG", "fib: " + it)
    }

//----#### SNIPPET #### - 7
    val p = seqFib.take(40).last
    val gr = p.second * 1.0 / p.first
    // =  1.618033988749895

//----#### SNIPPET #### - 8
    fun <T> sequence(
        block: suspend SequenceScope<T>.() -> Unit
    ): Sequence<T>

//----#### SNIPPET #### - 9
    Sequence { iterator(block) }

//----#### SNIPPET #### - 10
    yieldAll([some implementation of Iterable])
    // or
    yieldAll([some implementation of Iterator])
    // or
    yieldAll([some implementation of Sequence])

//----#### SNIPPET #### - 11
    val sequence = sequence {
        // This is an iterable:
        yieldAll(1..10 step 2)
    }

    // Usage example:
    sequence.take(8).forEach {
        Log.e("LOG", it.toString())
    }
    // -> 1, 3, 5, 7, 9
